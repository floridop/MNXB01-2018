# Student: Taichi Ito
# (very much incomplete)
# E0 (1 point)
# inspect the website http://fortunecookieapi.herokuapp.com/
# and understand the format of the data that the API returns
# at http://fortunecookieapi.herokuapp.com/v1/fortunes
# understand what kind of data structure teh website returns and write it here:
#
# Datastructure format is __________CSV__________
# E1 (1 point)
# Create a temporary directory with the mktemp command.
# save its name in a variable named FTTEMPDIR
# make sure the directory is created in /tmp and is called ftellerXXX
# where XXX are random characters created by mktemp. Read mktemp
# documentation to understand more.
#<FTTEMPDIR = $ftellerpPr>
# E2 (1 point)
# Download the database of fortunes from the URL
# http://fortunecookieapi.herokuapp.com/v1/fortunes
# using the wget command.
# save it into FTTEMPDIR
# make sure the output of wget is not visible to the user.
#<chmod 700 fteller0Gw
# ./fteller0Gw
# wget https://fortunecookieapi.herokuapp.com/v1/fortunes>
# E3 (1 point)
# use the dumpfile function to print the content of the fortunes file.
dumpfile() {
FTTEMPDIR=$1
if [[ "${PRINTINFO}x" == "--printinfox" ]]; then
echo "printing $FTTEMPDIR..."
cat $FTTEMPDIR
fi
}
dumpfile
# E4 (2 point) Use the tool json_pp to print nicely the
# fortunes file and save it as $FTTEMPDIR/fortunes_pp
# (hint: use cat and the pipe | to pass input to json_pp, and use
# the redirector > to write the output of the commands to a file.)
#<json_pp < fotunes > fortunes_pp>
# E5 (1 points)
# use the dumpfile function to print the content of the fortunes_pp file.
#<YOUR CODE HERE>
# E6 (2 points) exit with 0 if --printinfo specified.
# cleanup if --cleanup is specified.# Inform the user with a message:
# "Exiting because --printinfo specified"
# call the cleanup function to delete the temporary files.
# To write this you can take inspiration in the IF statements in the
# helper functions at the beginning of this file.
#<YOUR CODE HERE>
# E7 (1 point)
# Extract only the lines containing "message" and save them as
$FTTEMPDIR/fortunes_messages
#<YOUR CODE HERE>
# E8 (2 points) calculate the number of lines in the fortunes_messages file
# and store it in a variable NUMMSG
# hint: use the command wc, the pipe and a tool called "cut"
# see cut examples here:
# https://www.thegeekstuff.com/2013/06/cut-command-examples
#<YOUR CODE HERE>
# E9 (2 points)
# pick a random number between 1 and NUMMSG and save it into the variable
# CHOSEN
# use the predefined variable RANDOM and the bc command. For hints see:
# https://coderwall.com/p/s2ttyg/random-number-generator-in-bash
#<YOUR CODE HERE>
#E10 (2 points)
# Pick the CHOSEN message from the list and print it on screen
# use head and tail to achieve this. Search on the internet:
# "print by line number using bash"
# put the message in a variable called MESSAGE
#<YOUR CODE HERE>
# E11 (1 point) extract only the message content using cut
#<YOUR CODE HERE>
# E12 (1 point) Use echo -e to print spaces and newlines to show the
# output as in the simple_call_output file
#<YOUR CODE HERE>
# calling cleanup to clean the tmp folder
cleanup $FTTEMPDIR
